

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."experience_type" AS ENUM (
    'work',
    'education',
    'certification',
    'project'
);


ALTER TYPE "public"."experience_type" OWNER TO "postgres";


CREATE TYPE "public"."skill_category" AS ENUM (
    'technical',
    'managerial',
    'personal'
);


ALTER TYPE "public"."skill_category" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."authorized_users" (
    "id" integer NOT NULL,
    "email" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."authorized_users" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."authorized_users_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE "public"."authorized_users_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."authorized_users_id_seq" OWNED BY "public"."authorized_users"."id";



CREATE TABLE IF NOT EXISTS "public"."experiences" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "type" "public"."experience_type" NOT NULL,
    "title" "text" NOT NULL,
    "institution" "text",
    "description" "text",
    "start_date" "date" NOT NULL,
    "end_date" "date",
    "order" smallint DEFAULT 0,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "location" "text",
    "is_featured" boolean DEFAULT false,
    "detailed_description" "text",
    "role" "text",
    "activities" "text",
);


ALTER TABLE "public"."experiences" OWNER TO "postgres";


COMMENT ON TABLE "public"."experiences" IS 'Stores timeline entries for work, education, and certifications.';



COMMENT ON COLUMN "public"."experiences"."end_date" IS 'Can be null for ongoing experiences.';



COMMENT ON COLUMN "public"."experiences"."order" IS 'A number to manually sort entries if needed.';



COMMENT ON COLUMN "public"."experiences"."role" IS 'Il ruolo specifico ricoperto durante l''esperienza (es. Sviluppatore Frontend, Project Manager).';



COMMENT ON COLUMN "public"."experiences"."activities" IS 'Un elenco o una descrizione dettagliata delle attività e responsabilità principali.';



ALTER TABLE "public"."experiences" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."experiences_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" bigint NOT NULL,
    "full_name" "text",
    "professional_title" "text",
    "bio" "text",
    "date_of_birth" "date",
    "nationality" "text"
    "contact_email" "text",
    "contact_phone" "text",
    "linkedin_url" "text",
    "github_url" "text",
    "website_url" "text"
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "user_id" "uuid",
    "avatar_url" "text",
    "cv_url" "text",
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


COMMENT ON TABLE "public"."profile" IS 'Stores the main profile information for the left column.';



COMMENT ON COLUMN "public"."profile"."avatar_url" IS 'URL to the user-uploaded profile picture, hosted on Supabase Storage.';



COMMENT ON COLUMN "public"."profile"."cv_url" IS 'URL to the user-uploaded CV PDF, hosted on Supabase Storage.';



COMMENT ON COLUMN "public"."profile"."date_of_birth" IS 'User''s date of birth to calculate age dynamically.';



COMMENT ON COLUMN "public"."profile"."nationality" IS 'User''s nationality.';



COMMENT ON COLUMN "public"."profile"."website_url" IS 'User''s personal or professional website URL.';



ALTER TABLE "public"."profile" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."skills" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "category" "public"."skill_category" NOT NULL,
    "weight" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "user_id" "uuid",
    CONSTRAINT "skills_weight_check" CHECK ((("weight" >= 1) AND ("weight" <= 5)))
);


ALTER TABLE "public"."skills" OWNER TO "postgres";


COMMENT ON TABLE "public"."skills" IS 'Stores skills for the tag cloud.';



COMMENT ON COLUMN "public"."skills"."weight" IS 'A value from 1 to 5 to determine the tag size.';



ALTER TABLE "public"."skills" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."skills_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."translations" (
    "id" bigint NOT NULL,
    "key" "text" NOT NULL,
    "it_text" "text",
    "en_text" "text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "user_id" "uuid"
);


ALTER TABLE "public"."translations" OWNER TO "postgres";


COMMENT ON TABLE "public"."translations" IS 'Stores Italian and English versions of texts for multi-language support.';



COMMENT ON COLUMN "public"."translations"."key" IS 'A unique identifier for a piece of text, e.g., "bio_main_text".';



ALTER TABLE "public"."translations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."translations_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."authorized_users" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."authorized_users_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."authorized_users"
    ADD CONSTRAINT "authorized_users_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."authorized_users"
    ADD CONSTRAINT "authorized_users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."experiences"
    ADD CONSTRAINT "experiences_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."skills"
    ADD CONSTRAINT "skills_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."translations"
    ADD CONSTRAINT "translations_key_key" UNIQUE ("key");



ALTER TABLE ONLY "public"."translations"
    ADD CONSTRAINT "translations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "unique_user_profile" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."experiences"
    ADD CONSTRAINT "fk_experiences_user_id" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."skills"
    ADD CONSTRAINT "fk_skills_user_id" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."translations"
    ADD CONSTRAINT "fk_translations_user_id" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "fk_user_id" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Enable delete for authenticated users on their own experiences" ON "public"."experiences" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable delete for authenticated users on their own skills" ON "public"."skills" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable delete for authenticated users on their own translations" ON "public"."translations" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users on their own experiences" ON "public"."experiences" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users on their own profile" ON "public"."profile" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users on their own skills" ON "public"."skills" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users on their own translations" ON "public"."translations" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for authenticated users based on user ID" ON "public"."profile" FOR UPDATE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for authenticated users on their own experiences" ON "public"."experiences" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for authenticated users on their own skills" ON "public"."skills" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for authenticated users on their own translations" ON "public"."translations" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Public read access for experiences" ON "public"."experiences" FOR SELECT USING (true);



CREATE POLICY "Public read access for profile" ON "public"."profile" FOR SELECT USING (true);



CREATE POLICY "Public read access for skills" ON "public"."skills" FOR SELECT USING (true);



CREATE POLICY "Public read access for translations" ON "public"."translations" FOR SELECT USING (true);



ALTER TABLE "public"."experiences" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."skills" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."translations" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."authorized_users" TO "anon";
GRANT ALL ON TABLE "public"."authorized_users" TO "authenticated";
GRANT ALL ON TABLE "public"."authorized_users" TO "service_role";



GRANT ALL ON SEQUENCE "public"."authorized_users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."authorized_users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."authorized_users_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."experiences" TO "anon";
GRANT ALL ON TABLE "public"."experiences" TO "authenticated";
GRANT ALL ON TABLE "public"."experiences" TO "service_role";



GRANT ALL ON SEQUENCE "public"."experiences_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."experiences_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."experiences_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."skills" TO "anon";
GRANT ALL ON TABLE "public"."skills" TO "authenticated";
GRANT ALL ON TABLE "public"."skills" TO "service_role";



GRANT ALL ON SEQUENCE "public"."skills_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."skills_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."skills_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."translations" TO "anon";
GRANT ALL ON TABLE "public"."translations" TO "authenticated";
GRANT ALL ON TABLE "public"."translations" TO "service_role";



GRANT ALL ON SEQUENCE "public"."translations_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."translations_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."translations_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
