-- File: setup.sql
-- Description: SQL script to set up the database schema for the CV website.

-- 1. PROFILE TABLE
-- Stores the main profile information for the left column.
CREATE TABLE profile (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  full_name text,
  professional_title text,
  bio text,
  contact_email text,
  contact_phone text,
  linkedin_url text,
  github_url text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments for clarity
COMMENT ON TABLE profile IS 'Stores the main profile information for the left column.';

-- 2. EXPERIENCES TABLE
-- Stores timeline entries for work, education, and certifications.
CREATE TYPE experience_type AS ENUM ('work', 'education', 'certification');

CREATE TABLE experiences (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type experience_type NOT NULL,
  title text NOT NULL,
  institution text, -- e.g., company name, university
  description text,
  start_date date NOT NULL,
  end_date date, -- Can be null for ongoing experiences
  "order" smallint DEFAULT 0,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments
COMMENT ON TABLE experiences IS 'Stores timeline entries for work, education, and certifications.';
COMMENT ON COLUMN experiences.end_date IS 'Can be null for ongoing experiences.';
COMMENT ON COLUMN experiences."order" IS 'A number to manually sort entries if needed.';

-- 3. SKILLS TABLE
-- Stores skills for the tag cloud.
CREATE TYPE skill_category AS ENUM ('technical', 'managerial', 'soft');

CREATE TABLE skills (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  category skill_category NOT NULL,
  weight smallint NOT NULL CHECK (weight >= 1 AND weight <= 5), -- Scale 1-5
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments
COMMENT ON TABLE skills IS 'Stores skills for the tag cloud.';
COMMENT ON COLUMN skills.weight IS 'A value from 1 to 5 to determine the tag size.';


-- 4. LANGUAGES TABLE
-- This is a simple key-value table for translations.
-- We will manage translations here. A more robust solution might use JSONB,
-- but for this project, this is simple and effective.
CREATE TABLE translations (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key text UNIQUE NOT NULL,
  it_text text,
  en_text text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

COMMENT ON TABLE translations IS 'Stores Italian and English versions of texts for multi-language support.';
COMMENT ON COLUMN translations.key IS 'A unique identifier for a piece of text, e.g., "bio_main_text".';


-- 5. Enable Row Level Security (RLS)
-- Good practice for all tables. We'll define policies later.
ALTER TABLE profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE experiences ENABLE ROW LEVEL SECURITY;
ALTER TABLE skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE translations ENABLE ROW LEVEL SECURITY;

-- 6. Create public access policies
-- For now, we allow public read access to all tables so the frontend can fetch the data.
-- Admin panel will require authenticated access for write operations.
CREATE POLICY "Public read access for profile" ON profile FOR SELECT USING (true);
CREATE POLICY "Public read access for experiences" ON experiences FOR SELECT USING (true);
CREATE POLICY "Public read access for skills" ON skills FOR SELECT USING (true);
CREATE POLICY "Public read access for translations" ON translations FOR SELECT USING (true);

-- Note: Write/Update/Delete policies will be more restrictive and require authentication.
-- We will set those up when building the admin panel.
